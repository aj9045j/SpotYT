{"ast":null,"code":"// import React, { useEffect, useState } from 'react';\n// import '../style/song.css';\n\n// export default function Song() {\n//     const [isVisible, setIsVisible] = useState(false);\n//     const [songs, setSongs] = useState([]);\n//     const [audioUrl, setAudioUrl] = useState('');\n//     const [currImage, setCurrImage] = useState('');\n//     const [queryParam, setQueryParam] = useState('');\n//     const [imageUrls, setImageUrls] = useState({});\n\n//     useEffect(() => {\n//         const getQueryParam = async () => {\n//             const urlParams = await new URLSearchParams(window.location.search);\n//             setQueryParam(urlParams.get('playlistId'));\n//         };\n//         getQueryParam();\n//     }, []);\n\n//     useEffect(() => {\n//         const fetchSongs = async () => {\n//             try {\n//                 const response = await fetch(`http://localhost:5000/fetchSong/${queryParam}`);\n//                 if (!response.ok) {\n//                     throw new Error('Failed to fetch songs');\n//                 }\n//                 const data = await response.json();\n//                 setSongs(data.songs);\n//             } catch (error) {\n//                 console.error('Error fetching songs:', error);\n//             }\n//         };\n//         fetchSongs();\n//     }, [queryParam]);\n\n//     useEffect(() => {\n//         const fetchImages = async () => {\n//             const urls = {};\n//             await Promise.all(\n//                 songs.map(async (song) => {\n//                     try {\n//                         const response = await fetch(`http://localhost:5000/fetchImage/${song}`);\n//                         if (!response.ok) {\n//                             throw new Error('Failed to fetch image');\n//                         }\n//                         const data = await response.json();\n//                         urls[song] = data.url;\n//                     } catch (error) {\n//                         console.error('Error fetching image:', error);\n//                     }\n//                 })\n//             );\n//             setImageUrls(urls);\n//         };\n\n//         fetchImages();\n//     }, [songs]);\n\n//     const playSong = async (query) => {\n//         try {\n//             const response = await fetch(`http://localhost:5000/fetchUrl/${query}`);\n//             if (!response.ok) {\n//                 throw new Error('Failed to fetch song URL');\n//             }\n//             const data = await response.json();\n//             setAudioUrl(data.downloadUrl);\n//             setCurrImage(data.imageUrl);\n//             setPopupVisible(true);\n//         } catch (error) {\n//             console.error('Error playing song:', error);\n//         }\n//     };\n\n//     const toggleBox = () => {\n//         setIsVisible(prevState => !prevState);\n//     };\n//     return (\n//         <div className=''>\n\n//             <div className='song-list'>\n//                 <h1>ShowSong</h1>\n//                 <ul>\n//                     {songs.map((song, index) => (\n//                         <li key={index}>\n//                             <button className=\"button\" onClick={() => playSong(song)}>\n//                                 <div className='song-info'>\n//                                     <img src={imageUrls[song]} alt={song} />\n//                                     <p>{song}</p>\n//                                 </div>\n//                             </button>\n//                         </li>\n//                     ))}\n//                 </ul>\n//             </div>\n\n//             <div className=\"container\">\n//                 <div className={`box ${isVisible ? 'show' : 'hide'}`}>\n//                     <div className='player'>\n\n//                         <img src={currImage} alt=\"\" />\n//                         <audio src={audioUrl} controls autoPlay></audio>\n//                     </div>\n//                 </div>\n//                 <button className=\"toggle-btn\" onClick={toggleBox}>Toggle Box</button>\n//             </div>\n\n//         </div>\n//     );\n// }","map":{"version":3,"names":[],"sources":["/home/ajay/Desktop/spotyt/frontend/src/pages/Songs.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\n// import '../style/song.css';\n\n// export default function Song() {\n//     const [isVisible, setIsVisible] = useState(false);\n//     const [songs, setSongs] = useState([]);\n//     const [audioUrl, setAudioUrl] = useState('');\n//     const [currImage, setCurrImage] = useState('');\n//     const [queryParam, setQueryParam] = useState('');\n//     const [imageUrls, setImageUrls] = useState({});\n    \n//     useEffect(() => {\n//         const getQueryParam = async () => {\n//             const urlParams = await new URLSearchParams(window.location.search);\n//             setQueryParam(urlParams.get('playlistId'));\n//         };\n//         getQueryParam();\n//     }, []);\n\n//     useEffect(() => {\n//         const fetchSongs = async () => {\n//             try {\n//                 const response = await fetch(`http://localhost:5000/fetchSong/${queryParam}`);\n//                 if (!response.ok) {\n//                     throw new Error('Failed to fetch songs');\n//                 }\n//                 const data = await response.json();\n//                 setSongs(data.songs);\n//             } catch (error) {\n//                 console.error('Error fetching songs:', error);\n//             }\n//         };\n//         fetchSongs();\n//     }, [queryParam]);\n\n//     useEffect(() => {\n//         const fetchImages = async () => {\n//             const urls = {};\n//             await Promise.all(\n//                 songs.map(async (song) => {\n//                     try {\n//                         const response = await fetch(`http://localhost:5000/fetchImage/${song}`);\n//                         if (!response.ok) {\n//                             throw new Error('Failed to fetch image');\n//                         }\n//                         const data = await response.json();\n//                         urls[song] = data.url;\n//                     } catch (error) {\n//                         console.error('Error fetching image:', error);\n//                     }\n//                 })\n//             );\n//             setImageUrls(urls);\n//         };\n\n//         fetchImages();\n//     }, [songs]);\n\n//     const playSong = async (query) => {\n//         try {\n//             const response = await fetch(`http://localhost:5000/fetchUrl/${query}`);\n//             if (!response.ok) {\n//                 throw new Error('Failed to fetch song URL');\n//             }\n//             const data = await response.json();\n//             setAudioUrl(data.downloadUrl);\n//             setCurrImage(data.imageUrl);\n//             setPopupVisible(true);\n//         } catch (error) {\n//             console.error('Error playing song:', error);\n//         }\n//     };\n\n\n//     const toggleBox = () => {\n//         setIsVisible(prevState => !prevState);\n//     };\n//     return (\n//         <div className=''>\n\n//             <div className='song-list'>\n//                 <h1>ShowSong</h1>\n//                 <ul>\n//                     {songs.map((song, index) => (\n//                         <li key={index}>\n//                             <button className=\"button\" onClick={() => playSong(song)}>\n//                                 <div className='song-info'>\n//                                     <img src={imageUrls[song]} alt={song} />\n//                                     <p>{song}</p>\n//                                 </div>\n//                             </button>\n//                         </li>\n//                     ))}\n//                 </ul>\n//             </div>\n\n//             <div className=\"container\">\n//                 <div className={`box ${isVisible ? 'show' : 'hide'}`}>\n//                     <div className='player'>\n\n//                         <img src={currImage} alt=\"\" />\n//                         <audio src={audioUrl} controls autoPlay></audio>\n//                     </div>\n//                 </div>\n//                 <button className=\"toggle-btn\" onClick={toggleBox}>Toggle Box</button>\n//             </div>\n\n//         </div>\n//     );\n// }\n\n\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}