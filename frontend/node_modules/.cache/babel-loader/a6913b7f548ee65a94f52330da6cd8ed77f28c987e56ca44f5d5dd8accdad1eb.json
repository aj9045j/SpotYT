{"ast":null,"code":"var _jsxFileName = \"/home/ajay/Desktop/spotyt/frontend/src/pages/Songs.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n\n// export default function Song() {\n//     const [songs, setSongs] = useState([]);\n//     const [audioUrl, setAudioUrl] = useState('');\n//     const [currImage, setcurrImage] = useState('');\n//     const [queryParam, setQueryParam] = useState('');\n\n//     useEffect(() => {\n//         const getquery = async () => {\n//             const urlParams = await new URLSearchParams(window.location.search);\n//             console.log(urlParams);\n//             setQueryParam(urlParams.get('playlistId'));\n//             console.log(urlParams.get('playlistId'));\n//         }\n// getquery();\n//     }, [])\n\n//     useEffect(() => {\n\n//         const fetchSongs = async () => {\n\n//             try {\n//                 const response = await fetch(`http://localhost:5000/fetchSong/${queryParam}`);\n\n//                 if (!response.ok) {\n//                     throw new Error('Failed to fetch songs');\n//                 }\n//                 const data = await response.json();\n//                 setSongs(data.songs);\n//             } catch (error) {\n//                 console.error('Error fetching songs:', error);\n//             }\n//         };\n\n//         fetchSongs();\n//     }, [queryParam]);\n\n//     const playSong = async (query) => {\n//         try {\n//             const response = await fetch(`http://localhost:5000/fetchUrl/${query}`);\n//             if (!response.ok) {\n//                 throw new Error('Failed to fetch song URL');\n//             }\n//             const data = await response.json();\n//             setAudioUrl(data.downloadUrl);\n//             console.log(data.downloadUrl);\n//             setcurrImage(data.imageUrl);\n//             console.log(data.imageUrl);\n//         } catch (error) {\n//             console.error('Error playing song:', error);\n//         }\n//     };\n\n//     return (\n//         <div className='player'>\n//             <div>\n//                 <h1>ShowSong</h1>\n//                 <ul>\n//                     {songs.map((song, index) => (\n//                         <li key={index}>\n//                             <p>{song}</p>\n//                             <button onClick={() => playSong(song)}>Play</button>\n//                         </li>\n//                     ))}\n//                 </ul>\n\n//             </div>\n\n//             <div className='popup'>\n//                 <img src={currImage} alt=\"\" />\n//                 <audio src={audioUrl} controls autoPlay></audio>\n//             </div>\n//         </div>\n//     );\n// }\n\nimport React, { useEffect, useState } from 'react';\n// import './Song.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Song() {\n  _s();\n  const [songs, setSongs] = useState([]);\n  const [audioUrl, setAudioUrl] = useState('');\n  const [currImage, setcurrImage] = useState('');\n  const [queryParam, setQueryParam] = useState('');\n  const [popupVisible, setPopupVisible] = useState(false);\n  useEffect(() => {\n    const getquery = async () => {\n      const urlParams = await new URLSearchParams(window.location.search);\n      setQueryParam(urlParams.get('playlistId'));\n    };\n    getquery();\n  }, []);\n  useEffect(() => {\n    const fetchSongs = async () => {\n      try {\n        const response = await fetch(`http://localhost:5000/fetchSong/${queryParam}`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch songs');\n        }\n        const data = await response.json();\n        setSongs(data.songs);\n      } catch (error) {\n        console.error('Error fetching songs:', error);\n      }\n    };\n    fetchSongs();\n  }, [queryParam]);\n  const playSong = async query => {\n    try {\n      const response = await fetch(`http://localhost:5000/fetchUrl/${query}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch song URL');\n      }\n      const data = await response.json();\n      setAudioUrl(data.downloadUrl);\n      setcurrImage(data.imageUrl);\n      setPopupVisible(true);\n    } catch (error) {\n      console.error('Error playing song:', error);\n    }\n  };\n  const closePopup = () => {\n    setPopupVisible(false);\n  };\n  const imageSrc = async song => {\n    const response = await fetch(`http://localhost:5000/fetchImage/${song}`);\n    if (response.ok) {\n      const data = await response.json();\n      console.log(data.url);\n      return await data.url;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"player\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"ShowSong\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: songs.map((song, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => playSong(song),\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: song\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: fetch(`http://localhost:5000/fetchImage/${song}`),\n              alt: `${song}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 29\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: `open-popup-btn ${popupVisible ? 'hidden' : ''}`,\n      onClick: () => setPopupVisible(true),\n      children: \"Open Popup\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `popup ${popupVisible ? 'active' : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"close-btn\",\n        onClick: closePopup,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: currImage,\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n        src: audioUrl,\n        controls: true,\n        autoPlay: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 9\n  }, this);\n}\n_s(Song, \"xBs2PA51wXNJRF+NuwzENqGlC2o=\");\n_c = Song;\nvar _c;\n$RefreshReg$(_c, \"Song\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Song","_s","songs","setSongs","audioUrl","setAudioUrl","currImage","setcurrImage","queryParam","setQueryParam","popupVisible","setPopupVisible","getquery","urlParams","URLSearchParams","window","location","search","get","fetchSongs","response","fetch","ok","Error","data","json","error","console","playSong","query","downloadUrl","imageUrl","closePopup","imageSrc","song","log","url","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","onClick","src","alt","controls","autoPlay","_c","$RefreshReg$"],"sources":["/home/ajay/Desktop/spotyt/frontend/src/pages/Songs.js"],"sourcesContent":["\n// import React, { useEffect, useState } from 'react';\n\n// export default function Song() {\n//     const [songs, setSongs] = useState([]);\n//     const [audioUrl, setAudioUrl] = useState('');\n//     const [currImage, setcurrImage] = useState('');\n//     const [queryParam, setQueryParam] = useState('');\n\n//     useEffect(() => {\n//         const getquery = async () => {\n//             const urlParams = await new URLSearchParams(window.location.search);\n//             console.log(urlParams);\n//             setQueryParam(urlParams.get('playlistId'));\n//             console.log(urlParams.get('playlistId'));\n//         }\n// getquery();\n//     }, [])\n\n//     useEffect(() => {\n\n\n//         const fetchSongs = async () => {\n\n//             try {\n//                 const response = await fetch(`http://localhost:5000/fetchSong/${queryParam}`);\n\n//                 if (!response.ok) {\n//                     throw new Error('Failed to fetch songs');\n//                 }\n//                 const data = await response.json();\n//                 setSongs(data.songs);\n//             } catch (error) {\n//                 console.error('Error fetching songs:', error);\n//             }\n//         };\n\n//         fetchSongs();\n//     }, [queryParam]);\n\n//     const playSong = async (query) => {\n//         try {\n//             const response = await fetch(`http://localhost:5000/fetchUrl/${query}`);\n//             if (!response.ok) {\n//                 throw new Error('Failed to fetch song URL');\n//             }\n//             const data = await response.json();\n//             setAudioUrl(data.downloadUrl);\n//             console.log(data.downloadUrl);\n//             setcurrImage(data.imageUrl);\n//             console.log(data.imageUrl);\n//         } catch (error) {\n//             console.error('Error playing song:', error);\n//         }\n//     };\n\n\n\n\n\n//     return (\n//         <div className='player'>\n//             <div>\n//                 <h1>ShowSong</h1>\n//                 <ul>\n//                     {songs.map((song, index) => (\n//                         <li key={index}>\n//                             <p>{song}</p>\n//                             <button onClick={() => playSong(song)}>Play</button>\n//                         </li>\n//                     ))}\n//                 </ul>\n\n//             </div>\n\n//             <div className='popup'>\n//                 <img src={currImage} alt=\"\" />\n//                 <audio src={audioUrl} controls autoPlay></audio>\n//             </div>\n//         </div>\n//     );\n// }\n\n\n\nimport React, { useEffect, useState } from 'react';\n// import './Song.css';\n\nexport default function Song() {\n    const [songs, setSongs] = useState([]);\n    const [audioUrl, setAudioUrl] = useState('');\n    const [currImage, setcurrImage] = useState('');\n    const [queryParam, setQueryParam] = useState('');\n    const [popupVisible, setPopupVisible] = useState(false);\n\n    useEffect(() => {\n        const getquery = async () => {\n            const urlParams = await new URLSearchParams(window.location.search);\n            setQueryParam(urlParams.get('playlistId'));\n        }\n        getquery();\n    }, [])\n\n    useEffect(() => {\n        const fetchSongs = async () => {\n            try {\n                const response = await fetch(`http://localhost:5000/fetchSong/${queryParam}`);\n                if (!response.ok) {\n                    throw new Error('Failed to fetch songs');\n                }\n                const data = await response.json();\n                setSongs(data.songs);\n            } catch (error) {\n                console.error('Error fetching songs:', error);\n            }\n        };\n        fetchSongs();\n    }, [queryParam]);\n\n    const playSong = async (query) => {\n        try {\n            const response = await fetch(`http://localhost:5000/fetchUrl/${query}`);\n            if (!response.ok) {\n                throw new Error('Failed to fetch song URL');\n            }\n            const data = await response.json();\n            setAudioUrl(data.downloadUrl);\n            setcurrImage(data.imageUrl);\n            setPopupVisible(true);\n        } catch (error) {\n            console.error('Error playing song:', error);\n        }\n    };\n\n    const closePopup = () => {\n        setPopupVisible(false);\n    };\n    const imageSrc = async (song) => {\n        const response = await fetch(`http://localhost:5000/fetchImage/${song}`);\n        if(response.ok){\n            const data = await response.json();\n            console.log(data.url);\n            return await data.url;\n        }\n    }\n    return (\n        <div className='player'>\n            <div>\n                <h1>ShowSong</h1>\n                <ul>\n                    {songs.map((song, index) => (\n                        <li key={index}>\n\n                            <button onClick={() => playSong(song)}>\n                                <p>{song}</p>\n                                <img src={fetch(`http://localhost:5000/fetchImage/${song}`)} alt={`${song}`} />\n                            </button>\n                        </li>\n                    ))}\n                </ul>\n            </div>\n\n            {/* Button to open popup */}\n            <button className={`open-popup-btn ${popupVisible ? 'hidden' : ''}`} onClick={() => setPopupVisible(true)}>Open Popup</button>\n\n            {/* Popup */}\n            <div className={`popup ${popupVisible ? 'active' : ''}`}>\n                <button className=\"close-btn\" onClick={closePopup}>Close</button>\n                <img src={currImage} alt=\"\" />\n                <audio src={audioUrl} controls autoPlay></audio>\n            </div>\n        </div>\n    );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}