{"ast":null,"code":"var _jsxFileName = \"/home/ajay/Desktop/spotyt/frontend/src/pages/Songs.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n// import '../style/song.css';\n\n// export default function Song() {\n//     const [isVisible, setIsVisible] = useState(false);\n//     const [songs, setSongs] = useState([]);\n//     const [audioUrl, setAudioUrl] = useState('');\n//     const [currImage, setCurrImage] = useState('');\n//     const [queryParam, setQueryParam] = useState('');\n//     const [imageUrls, setImageUrls] = useState({});\n\n//     useEffect(() => {\n//         const getQueryParam = async () => {\n//             const urlParams = await new URLSearchParams(window.location.search);\n//             setQueryParam(urlParams.get('playlistId'));\n//         };\n//         getQueryParam();\n//     }, []);\n\n//     useEffect(() => {\n//         const fetchSongs = async () => {\n//             try {\n//                 const response = await fetch(`http://localhost:5000/fetchSong/${queryParam}`);\n//                 if (!response.ok) {\n//                     throw new Error('Failed to fetch songs');\n//                 }\n//                 const data = await response.json();\n//                 setSongs(data.songs);\n//             } catch (error) {\n//                 console.error('Error fetching songs:', error);\n//             }\n//         };\n//         fetchSongs();\n//     }, [queryParam]);\n\n//     useEffect(() => {\n//         const fetchImages = async () => {\n//             const urls = {};\n//             await Promise.all(\n//                 songs.map(async (song) => {\n//                     try {\n//                         const response = await fetch(`http://localhost:5000/fetchImage/${song}`);\n//                         if (!response.ok) {\n//                             throw new Error('Failed to fetch image');\n//                         }\n//                         const data = await response.json();\n//                         urls[song] = data.url;\n//                     } catch (error) {\n//                         console.error('Error fetching image:', error);\n//                     }\n//                 })\n//             );\n//             setImageUrls(urls);\n//         };\n\n//         fetchImages();\n//     }, [songs]);\n\n//     const playSong = async (query) => {\n//         try {\n//             const response = await fetch(`http://localhost:5000/fetchUrl/${query}`);\n//             if (!response.ok) {\n//                 throw new Error('Failed to fetch song URL');\n//             }\n//             const data = await response.json();\n//             setAudioUrl(data.downloadUrl);\n//             setCurrImage(data.imageUrl);\n//             setPopupVisible(true);\n//         } catch (error) {\n//             console.error('Error playing song:', error);\n//         }\n//     };\n\n//     const toggleBox = () => {\n//         setIsVisible(prevState => !prevState);\n//     };\n//     return (\n//         <div className=''>\n\n//             <div className='song-list'>\n//                 <h1>ShowSong</h1>\n//                 <ul>\n//                     {songs.map((song, index) => (\n//                         <li key={index}>\n//                             <button className=\"button\" onClick={() => playSong(song)}>\n//                                 <div className='song-info'>\n//                                     <img src={imageUrls[song]} alt={song} />\n//                                     <p>{song}</p>\n//                                 </div>\n//                             </button>\n//                         </li>\n//                     ))}\n//                 </ul>\n//             </div>\n\n//             <div className=\"container\">\n//                 <div className={`box ${isVisible ? 'show' : 'hide'}`}>\n//                     <div className='player'>\n\n//                         <img src={currImage} alt=\"\" />\n//                         <audio src={audioUrl} controls autoPlay onEnded={handleSongEnd}></audio>\n//                     </div>\n//                 </div>\n//                 <button className=\"toggle-btn\" onClick={toggleBox}>Toggle Box</button>\n//             </div>\n\n//         </div>\n//     );\n// }\n\nimport React, { useEffect, useState } from 'react';\nimport '../style/song.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Song() {\n  _s();\n  const [isVisible, setIsVisible] = useState(false);\n  const [songs, setSongs] = useState([]);\n  const [currentSongIndex, setCurrentSongIndex] = useState(0);\n  const [audioUrl, setAudioUrl] = useState('');\n  const [currImage, setCurrImage] = useState('');\n  const [queryParam, setQueryParam] = useState('');\n  const [imageUrls, setImageUrls] = useState({});\n  const [popupVisible, setPopupVisible] = useState(false);\n  useEffect(() => {\n    const getQueryParam = async () => {\n      const urlParams = await new URLSearchParams(window.location.search);\n      setQueryParam(urlParams.get('playlistId'));\n    };\n    getQueryParam();\n  }, []);\n  useEffect(() => {\n    const fetchSongs = async () => {\n      try {\n        const response = await fetch(`http://localhost:5000/fetchSong/${queryParam}`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch songs');\n        }\n        const data = await response.json();\n        setSongs(data.songs);\n      } catch (error) {\n        console.error('Error fetching songs:', error);\n      }\n    };\n    fetchSongs();\n  }, [queryParam]);\n  useEffect(() => {\n    const fetchImages = async () => {\n      const urls = {};\n      await Promise.all(songs.map(async song => {\n        try {\n          const response = await fetch(`http://localhost:5000/fetchImage/${song}`);\n          if (!response.ok) {\n            throw new Error('Failed to fetch image');\n          }\n          const data = await response.json();\n          urls[song] = data.url;\n        } catch (error) {\n          console.error('Error fetching image:', error);\n        }\n      }));\n      setImageUrls(urls);\n    };\n    fetchImages();\n  }, [songs]);\n  useEffect(() => {\n    if (songs.length > 0) {\n      // Set the initial song when the song list is available\n      setAudioUrl(songs[currentSongIndex]);\n      setCurrImage(imageUrls[songs[currentSongIndex]]);\n    }\n  }, [songs, currentSongIndex, imageUrls]);\n  const playSong = async index => {\n    try {\n      const response = await fetch(`http://localhost:5000/fetchUrl/${songs[index]}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch song URL');\n      }\n      const data = await response.json();\n      setAudioUrl(data.downloadUrl);\n      setCurrImage(data.imageUrl);\n      setCurrentSongIndex(index);\n      setPopupVisible(true);\n    } catch (error) {\n      console.error('Error playing song:', error);\n    }\n  };\n  const toggleBox = () => {\n    setIsVisible(prevState => !prevState);\n  };\n  const handleSongEnd = () => {\n    // Play the next song when the current one finishes\n    const nextSongIndex = (currentSongIndex + 1) % songs.length;\n    playSong(nextSongIndex);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"song-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"ShowSong\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: songs.map((song, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button\",\n            onClick: () => playSong(index),\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"song-info\",\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: imageUrls[song],\n                alt: song\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: song\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 29\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `box ${isVisible ? 'show' : 'hide'}`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: currImage,\n            alt: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n            src: audioUrl,\n            controls: true,\n            autoPlay: true,\n            onEnded: handleSongEnd\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"toggle-btn\",\n        onClick: toggleBox,\n        children: \"Toggle Box\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 208,\n    columnNumber: 9\n  }, this);\n}\n_s(Song, \"r0A+3WuSZkfQvSykrjbND0bgmIA=\");\n_c = Song;\nvar _c;\n$RefreshReg$(_c, \"Song\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Song","_s","isVisible","setIsVisible","songs","setSongs","currentSongIndex","setCurrentSongIndex","audioUrl","setAudioUrl","currImage","setCurrImage","queryParam","setQueryParam","imageUrls","setImageUrls","popupVisible","setPopupVisible","getQueryParam","urlParams","URLSearchParams","window","location","search","get","fetchSongs","response","fetch","ok","Error","data","json","error","console","fetchImages","urls","Promise","all","map","song","url","length","playSong","index","downloadUrl","imageUrl","toggleBox","prevState","handleSongEnd","nextSongIndex","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","alt","controls","autoPlay","onEnded","_c","$RefreshReg$"],"sources":["/home/ajay/Desktop/spotyt/frontend/src/pages/Songs.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\n// import '../style/song.css';\n\n// export default function Song() {\n//     const [isVisible, setIsVisible] = useState(false);\n//     const [songs, setSongs] = useState([]);\n//     const [audioUrl, setAudioUrl] = useState('');\n//     const [currImage, setCurrImage] = useState('');\n//     const [queryParam, setQueryParam] = useState('');\n//     const [imageUrls, setImageUrls] = useState({});\n    \n//     useEffect(() => {\n//         const getQueryParam = async () => {\n//             const urlParams = await new URLSearchParams(window.location.search);\n//             setQueryParam(urlParams.get('playlistId'));\n//         };\n//         getQueryParam();\n//     }, []);\n\n//     useEffect(() => {\n//         const fetchSongs = async () => {\n//             try {\n//                 const response = await fetch(`http://localhost:5000/fetchSong/${queryParam}`);\n//                 if (!response.ok) {\n//                     throw new Error('Failed to fetch songs');\n//                 }\n//                 const data = await response.json();\n//                 setSongs(data.songs);\n//             } catch (error) {\n//                 console.error('Error fetching songs:', error);\n//             }\n//         };\n//         fetchSongs();\n//     }, [queryParam]);\n\n//     useEffect(() => {\n//         const fetchImages = async () => {\n//             const urls = {};\n//             await Promise.all(\n//                 songs.map(async (song) => {\n//                     try {\n//                         const response = await fetch(`http://localhost:5000/fetchImage/${song}`);\n//                         if (!response.ok) {\n//                             throw new Error('Failed to fetch image');\n//                         }\n//                         const data = await response.json();\n//                         urls[song] = data.url;\n//                     } catch (error) {\n//                         console.error('Error fetching image:', error);\n//                     }\n//                 })\n//             );\n//             setImageUrls(urls);\n//         };\n\n//         fetchImages();\n//     }, [songs]);\n\n//     const playSong = async (query) => {\n//         try {\n//             const response = await fetch(`http://localhost:5000/fetchUrl/${query}`);\n//             if (!response.ok) {\n//                 throw new Error('Failed to fetch song URL');\n//             }\n//             const data = await response.json();\n//             setAudioUrl(data.downloadUrl);\n//             setCurrImage(data.imageUrl);\n//             setPopupVisible(true);\n//         } catch (error) {\n//             console.error('Error playing song:', error);\n//         }\n//     };\n\n\n//     const toggleBox = () => {\n//         setIsVisible(prevState => !prevState);\n//     };\n//     return (\n//         <div className=''>\n\n//             <div className='song-list'>\n//                 <h1>ShowSong</h1>\n//                 <ul>\n//                     {songs.map((song, index) => (\n//                         <li key={index}>\n//                             <button className=\"button\" onClick={() => playSong(song)}>\n//                                 <div className='song-info'>\n//                                     <img src={imageUrls[song]} alt={song} />\n//                                     <p>{song}</p>\n//                                 </div>\n//                             </button>\n//                         </li>\n//                     ))}\n//                 </ul>\n//             </div>\n\n//             <div className=\"container\">\n//                 <div className={`box ${isVisible ? 'show' : 'hide'}`}>\n//                     <div className='player'>\n\n//                         <img src={currImage} alt=\"\" />\n//                         <audio src={audioUrl} controls autoPlay onEnded={handleSongEnd}></audio>\n//                     </div>\n//                 </div>\n//                 <button className=\"toggle-btn\" onClick={toggleBox}>Toggle Box</button>\n//             </div>\n\n//         </div>\n//     );\n// }\n\n\nimport React, { useEffect, useState } from 'react';\nimport '../style/song.css';\n\nexport default function Song() {\n    const [isVisible, setIsVisible] = useState(false);\n    const [songs, setSongs] = useState([]);\n    const [currentSongIndex, setCurrentSongIndex] = useState(0);\n    const [audioUrl, setAudioUrl] = useState('');\n    const [currImage, setCurrImage] = useState('');\n    const [queryParam, setQueryParam] = useState('');\n    const [imageUrls, setImageUrls] = useState({});\n    const [popupVisible, setPopupVisible] = useState(false);\n\n    useEffect(() => {\n        const getQueryParam = async () => {\n            const urlParams = await new URLSearchParams(window.location.search);\n            setQueryParam(urlParams.get('playlistId'));\n        };\n        getQueryParam();\n    }, []);\n\n    useEffect(() => {\n        const fetchSongs = async () => {\n            try {\n                const response = await fetch(`http://localhost:5000/fetchSong/${queryParam}`);\n                if (!response.ok) {\n                    throw new Error('Failed to fetch songs');\n                }\n                const data = await response.json();\n                setSongs(data.songs);\n            } catch (error) {\n                console.error('Error fetching songs:', error);\n            }\n        };\n        fetchSongs();\n    }, [queryParam]);\n\n    useEffect(() => {\n        const fetchImages = async () => {\n            const urls = {};\n            await Promise.all(\n                songs.map(async (song) => {\n                    try {\n                        const response = await fetch(`http://localhost:5000/fetchImage/${song}`);\n                        if (!response.ok) {\n                            throw new Error('Failed to fetch image');\n                        }\n                        const data = await response.json();\n                        urls[song] = data.url;\n                    } catch (error) {\n                        console.error('Error fetching image:', error);\n                    }\n                })\n            );\n            setImageUrls(urls);\n        };\n\n        fetchImages();\n    }, [songs]);\n\n    useEffect(() => {\n        if (songs.length > 0) {\n            // Set the initial song when the song list is available\n            setAudioUrl(songs[currentSongIndex]);\n            setCurrImage(imageUrls[songs[currentSongIndex]]);\n        }\n    }, [songs, currentSongIndex, imageUrls]);\n\n    const playSong = async (index) => {\n        try {\n            const response = await fetch(`http://localhost:5000/fetchUrl/${songs[index]}`);\n            if (!response.ok) {\n                throw new Error('Failed to fetch song URL');\n            }\n            const data = await response.json();\n            setAudioUrl(data.downloadUrl);\n            setCurrImage(data.imageUrl);\n            setCurrentSongIndex(index);\n            setPopupVisible(true);\n        } catch (error) {\n            console.error('Error playing song:', error);\n        }\n    };\n\n    const toggleBox = () => {\n        setIsVisible(prevState => !prevState);\n    };\n\n    const handleSongEnd = () => {\n        // Play the next song when the current one finishes\n        const nextSongIndex = (currentSongIndex + 1) % songs.length;\n        playSong(nextSongIndex);\n    };\n\n    return (\n        <div className=''>\n            <div className='song-list'>\n                <h1>ShowSong</h1>\n                <ul>\n                    {songs.map((song, index) => (\n                        <li key={index}>\n                            <button className=\"button\" onClick={() => playSong(index)}>\n                                <div className='song-info'>\n                                    <img src={imageUrls[song]} alt={song} />\n                                    <p>{song}</p>\n                                </div>\n                            </button>\n                        </li>\n                    ))}\n                </ul>\n            </div>\n\n            <div className=\"container\">\n                <div className={`box ${isVisible ? 'show' : 'hide'}`}>\n                    <div className='player'>\n                        <img src={currImage} alt=\"\" />\n                        <audio src={audioUrl} controls autoPlay onEnded={handleSongEnd}></audio>\n                    </div>\n                </div>\n                <button className=\"toggle-btn\" onClick={toggleBox}>Toggle Box</button>\n            </div>\n        </div>\n    );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}