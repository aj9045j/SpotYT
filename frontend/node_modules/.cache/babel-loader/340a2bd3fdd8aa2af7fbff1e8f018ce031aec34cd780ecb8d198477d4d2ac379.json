{"ast":null,"code":"var _jsxFileName = \"/home/ajay/Desktop/spotyt/frontend/src/features/ShowPlaylist.js\";\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ShowPlaylist() {\n  const handleauth = async event => {\n    fetch('http://localhost:5000/auth').then(response => {\n      if (response.ok) {\n        return response.json(); // Parse the response body as JSON\n      } else {\n        throw new Error('Login failed');\n      }\n    }).then(data => {\n      // Set the sessionId cookie\n      window.location.href = data.authorizeURL; // Navigate to the home page\n    }).catch(error => {\n      console.error('Error:', error); // Handle fetch error or login failure\n    });\n  };\n  const handleAuthorization = () => {\n    // Extract the authorization code from the URL query parameters\n    const urlParams = new URLSearchParams(window.location.search);\n    const code = urlParams.get('code');\n\n    // Use the authorization code to make another request to your backend\n    // You can send this code to your backend server to exchange it for an access token\n    // and perform further actions such as fetching user data or accessing protected resources.\n    // Example:\n    // fetch('http://localhost:5000/searchPlaylist', {\n    //     method: 'POST',\n    //     headers: {\n    //         'Content-Type': 'application/json'\n    //     },\n    //     body: JSON.stringify({ code })\n    // }).then(response => {\n    //     if (response.ok) {\n    //         // Handle successful response\n    //     } else {\n    //         throw new Error('Failed to retrieve playlist tracks');\n    //     }\n    // }).catch(error => {\n    //     console.error('Error:', error); // Handle fetch error\n    // });\n\n    console.log('Authorization code:', code);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleauth,\n      children: \"authrizespotify\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      action: `http://localhost:5000/search`,\n      method: \"POST\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"url\",\n        children: \"enter the spotify url\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"url\",\n        id: \"url\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n}\n_c = ShowPlaylist;\nvar _c;\n$RefreshReg$(_c, \"ShowPlaylist\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","ShowPlaylist","handleauth","event","fetch","then","response","ok","json","Error","data","window","location","href","authorizeURL","catch","error","console","handleAuthorization","urlParams","URLSearchParams","search","code","get","log","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","action","method","htmlFor","type","name","id","_c","$RefreshReg$"],"sources":["/home/ajay/Desktop/spotyt/frontend/src/features/ShowPlaylist.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\n\n\nexport default function ShowPlaylist() {\n    \n    const handleauth = async (event) => {\n        fetch('http://localhost:5000/auth').then(response => {\n            if (response.ok) {\n                return response.json(); // Parse the response body as JSON\n            } else {\n                throw new Error('Login failed');\n            }\n        })\n            .then(data => {\n\n                // Set the sessionId cookie\n                window.location.href = data.authorizeURL; // Navigate to the home page\n            })\n            .catch(error => {\n                console.error('Error:', error); // Handle fetch error or login failure\n            });\n            \n    }\n\n    const handleAuthorization = () => {\n        // Extract the authorization code from the URL query parameters\n        const urlParams = new URLSearchParams(window.location.search);\n        const code = urlParams.get('code');\n        \n        // Use the authorization code to make another request to your backend\n        // You can send this code to your backend server to exchange it for an access token\n        // and perform further actions such as fetching user data or accessing protected resources.\n        // Example:\n        // fetch('http://localhost:5000/searchPlaylist', {\n        //     method: 'POST',\n        //     headers: {\n        //         'Content-Type': 'application/json'\n        //     },\n        //     body: JSON.stringify({ code })\n        // }).then(response => {\n        //     if (response.ok) {\n        //         // Handle successful response\n        //     } else {\n        //         throw new Error('Failed to retrieve playlist tracks');\n        //     }\n        // }).catch(error => {\n        //     console.error('Error:', error); // Handle fetch error\n        // });\n    \n        console.log('Authorization code:', code);\n    }\n    \n\n    return (\n        <div>\n            <button onClick={handleauth}>authrizespotify</button>\n            <form action={`http://localhost:5000/search`} method='POST'>\n                <label htmlFor=\"url\">enter the spotify url</label>\n                <input\n                    type=\"text\"\n                    name=\"url\"\n                    id='url'\n                />\n                <button type='submit'>Submit</button>\n            </form>\n            <button></button>\n        </div>\n    )\n}\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGlD,eAAe,SAASC,YAAYA,CAAA,EAAG;EAEnC,MAAMC,UAAU,GAAG,MAAOC,KAAK,IAAK;IAChCC,KAAK,CAAC,4BAA4B,CAAC,CAACC,IAAI,CAACC,QAAQ,IAAI;MACjD,IAAIA,QAAQ,CAACC,EAAE,EAAE;QACb,OAAOD,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC;MAC5B,CAAC,MAAM;QACH,MAAM,IAAIC,KAAK,CAAC,cAAc,CAAC;MACnC;IACJ,CAAC,CAAC,CACGJ,IAAI,CAACK,IAAI,IAAI;MAEV;MACAC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAGH,IAAI,CAACI,YAAY,CAAC,CAAC;IAC9C,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;MACZC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC,CAAC,CAAC;IACpC,CAAC,CAAC;EAEV,CAAC;EAED,MAAME,mBAAmB,GAAGA,CAAA,KAAM;IAC9B;IACA,MAAMC,SAAS,GAAG,IAAIC,eAAe,CAACT,MAAM,CAACC,QAAQ,CAACS,MAAM,CAAC;IAC7D,MAAMC,IAAI,GAAGH,SAAS,CAACI,GAAG,CAAC,MAAM,CAAC;;IAElC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEAN,OAAO,CAACO,GAAG,CAAC,qBAAqB,EAAEF,IAAI,CAAC;EAC5C,CAAC;EAGD,oBACItB,OAAA;IAAAyB,QAAA,gBACIzB,OAAA;MAAQ0B,OAAO,EAAExB,UAAW;MAAAuB,QAAA,EAAC;IAAe;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACrD9B,OAAA;MAAM+B,MAAM,EAAG,8BAA8B;MAACC,MAAM,EAAC,MAAM;MAAAP,QAAA,gBACvDzB,OAAA;QAAOiC,OAAO,EAAC,KAAK;QAAAR,QAAA,EAAC;MAAqB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAClD9B,OAAA;QACIkC,IAAI,EAAC,MAAM;QACXC,IAAI,EAAC,KAAK;QACVC,EAAE,EAAC;MAAK;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACX,CAAC,eACF9B,OAAA;QAAQkC,IAAI,EAAC,QAAQ;QAAAT,QAAA,EAAC;MAAM;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnC,CAAC,eACP9B,OAAA;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAgB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChB,CAAC;AAEd;AAACO,EAAA,GAjEuBpC,YAAY;AAAA,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}