{"ast":null,"code":"var _jsxFileName = \"/home/ajay/Desktop/spotyt/frontend/src/features/ShowSong.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ShowSong(props) {\n  _s();\n  const [songs, setSongs] = useState([]);\n  const [currentSong, setCurrentSong] = useState(null);\n  const [audioUrl, setAudioUrl] = useState('');\n  useEffect(() => {\n    const fetchSongs = async () => {\n      try {\n        const response = await fetch(`http://localhost:5000/fetchSong/${props.email}`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch songs');\n        }\n        const data = await response.json();\n        setSongs(data.songs);\n      } catch (error) {\n        console.error('Error fetching songs:', error);\n      }\n    };\n    fetchSongs();\n  }, [props.email]);\n  const playSong = async query => {\n    try {\n      const response = await fetch(`http://localhost:5000/fetchUrl/${query}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch song URL');\n      }\n      const data = await response.json();\n      setAudioUrl(data.downloadUrl);\n      console.log(data.downloadUrl);\n      setCurrentSong(query);\n    } catch (error) {\n      console.error('Error playing song:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"ShowSong\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: songs.map((song, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: song\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"audio\", {\n            controls: true,\n            children: [/*#__PURE__*/_jsxDEV(\"source\", {\n              src: currentSong == song ? audioUrl : '',\n              type: \"audio/mpeg\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 33\n            }, this), \"Your browser does not support the audio element.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => playSong(song),\n          children: \"Play\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n}\n\n// import React, { useEffect, useState } from 'react';\n\n// export default function ShowSong(props) {\n//     const [songs, setSongs] = useState([]);\n//     const [audioElements, setAudioElements] = useState({});\n//     const [currentSong, setCurrentSong] = useState(null);\n\n// useEffect(() => {\n//     const fetchSongs = async () => {\n//         try {\n//             const response = await fetch(`http://localhost:5000/fetchSong/${props.email}`);\n//             if (!response.ok) {\n//                 throw new Error('Failed to fetch songs');\n//             }\n//             const data = await response.json();\n//             setSongs(data.songs);\n//         } catch (error) {\n//             console.error('Error fetching songs:', error);\n//         }\n//     };\n\n//     fetchSongs();\n// }, [props.email]);\n\n//     useEffect(() => {\n//         const preloadAudio = async () => {\n//             const audioElementsCopy = { ...audioElements };\n//             for (const song of songs) {\n//                 try {\n//                     const response = await fetch(`http://localhost:5000/fetchUrl/${encodeURIComponent(song)}`);\n//                     if (!response.ok) {\n//                         throw new Error(`Failed to fetch URL for song: ${song}`);\n//                     }\n//                     const data = await response.json();\n//                     const audio = new Audio(data.downloadUrl);\n//                     audioElementsCopy[song] = audio;\n//                 } catch (error) {\n//                     console.error(error);\n//                 }\n//             }\n//             setAudioElements(audioElementsCopy);\n//         };\n\n//         preloadAudio();\n//     }, [songs]);\n\n//     const playSong = (song) => {\n//         const audio = audioElements[song];\n//         if (audio) {\n//             audio.play();\n//             setCurrentSong(song);\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <h1>ShowSong</h1>\n//             <ul>\n//                 {songs.map((song, index) => (\n//                     <li key={index}>\n//                         <p>{song}</p>\n//                         <button onClick={() => playSong(song)}>Play</button>\n//                     </li>\n//                 ))}\n//             </ul>\n//         </div>\n//     );\n// }\n_s(ShowSong, \"seifkFPPZPutgsI773efsL8jGQc=\");\n_c = ShowSong;\nvar _c;\n$RefreshReg$(_c, \"ShowSong\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","ShowSong","props","_s","songs","setSongs","currentSong","setCurrentSong","audioUrl","setAudioUrl","fetchSongs","response","fetch","email","ok","Error","data","json","error","console","playSong","query","downloadUrl","log","children","fileName","_jsxFileName","lineNumber","columnNumber","map","song","index","controls","src","type","onClick","_c","$RefreshReg$"],"sources":["/home/ajay/Desktop/spotyt/frontend/src/features/ShowSong.js"],"sourcesContent":["\n\n\nimport React, { useEffect, useState } from 'react';\n\nexport default function ShowSong(props) {\n    const [songs, setSongs] = useState([]);\n    const [currentSong, setCurrentSong] = useState(null);\n    const [audioUrl, setAudioUrl] = useState('');\n\n    useEffect(() => {\n        const fetchSongs = async () => {\n            try {\n                const response = await fetch(`http://localhost:5000/fetchSong/${props.email}`);\n                if (!response.ok) {\n                    throw new Error('Failed to fetch songs');\n                }\n                const data = await response.json();\n                setSongs(data.songs);\n            } catch (error) {\n                console.error('Error fetching songs:', error);\n            }\n        };\n\n        fetchSongs();\n    }, [props.email]);\n\n    const playSong = async (query) => {\n        try {\n            const response = await fetch(`http://localhost:5000/fetchUrl/${query}`);\n            if (!response.ok) {\n                throw new Error('Failed to fetch song URL');\n            }\n            const data = await response.json();\n            setAudioUrl(data.downloadUrl);\n            console.log(data.downloadUrl);\n            setCurrentSong(query);\n        } catch (error) {\n            console.error('Error playing song:', error);\n        }\n    };\n\n    return (\n        <div>\n            <h1>ShowSong</h1>\n            <ul>\n                {songs.map((song, index) => (\n                    <li key={index}>\n                        <p>{song}</p>\n                        <div>\n                            <audio controls>\n                                <source src={currentSong == song ? audioUrl : ''} type=\"audio/mpeg\" />\n                                Your browser does not support the audio element.\n                            </audio>\n                        </div>\n                        <button onClick={() => playSong(song)}>Play</button>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n\n// import React, { useEffect, useState } from 'react';\n\n// export default function ShowSong(props) {\n//     const [songs, setSongs] = useState([]);\n//     const [audioElements, setAudioElements] = useState({});\n//     const [currentSong, setCurrentSong] = useState(null);\n\n// useEffect(() => {\n//     const fetchSongs = async () => {\n//         try {\n//             const response = await fetch(`http://localhost:5000/fetchSong/${props.email}`);\n//             if (!response.ok) {\n//                 throw new Error('Failed to fetch songs');\n//             }\n//             const data = await response.json();\n//             setSongs(data.songs);\n//         } catch (error) {\n//             console.error('Error fetching songs:', error);\n//         }\n//     };\n\n//     fetchSongs();\n// }, [props.email]);\n\n//     useEffect(() => {\n//         const preloadAudio = async () => {\n//             const audioElementsCopy = { ...audioElements };\n//             for (const song of songs) {\n//                 try {\n//                     const response = await fetch(`http://localhost:5000/fetchUrl/${encodeURIComponent(song)}`);\n//                     if (!response.ok) {\n//                         throw new Error(`Failed to fetch URL for song: ${song}`);\n//                     }\n//                     const data = await response.json();\n//                     const audio = new Audio(data.downloadUrl);\n//                     audioElementsCopy[song] = audio;\n//                 } catch (error) {\n//                     console.error(error);\n//                 }\n//             }\n//             setAudioElements(audioElementsCopy);\n//         };\n\n//         preloadAudio();\n//     }, [songs]);\n\n//     const playSong = (song) => {\n//         const audio = audioElements[song];\n//         if (audio) {\n//             audio.play();\n//             setCurrentSong(song);\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <h1>ShowSong</h1>\n//             <ul>\n//                 {songs.map((song, index) => (\n//                     <li key={index}>\n//                         <p>{song}</p>\n//                         <button onClick={() => playSong(song)}>Play</button>\n//                     </li>\n//                 ))}\n//             </ul>\n//         </div>\n//     );\n// }\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}